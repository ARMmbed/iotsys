// Variables
description = 'IoTSyS XACML PEP/PDP'

repositories {
	maven{
		url 'https://repository.jboss.org/nexus/content/repositories/releases/'
		url 'https://repository.jboss.org/nexus/content/groups/public/'
	}
}

eclipse{
	classpath{
		file {
			withXml {
				def node = it.asNode()
				node.appendNode('classpathentry', [kind: 'src', path: '/iotsys-common', exported:'true'])
				node.appendNode('classpathentry', [kind: 'src', path: '/iotsys-osgi', exported:'true'])
			}
		}
	}
}

configurations { provided }

sourceSets{
	main { compileClasspath += configurations.provided }
	test {
		java { srcDir 'test' }
		resources { srcDir 'res' }
	}
}


jar {
	from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }

	manifest {
		attributes("Manifest-Version": "1.0",
		"Bundle-Name": "IoTSyS-XACML PDP",
		"Bundle-SymbolicName": "at.ac.tuwien.auto.iotsys.xacml",
		"Bundle-Description": "Security module which uses IoTSyS Server interceptors to analyze incoming messages and check authorization.",
		"Bundle-Vendor": "Vienna University of Technology, Automation Systems Group, www.auto.tuwien.ac.at",
		"Bundle-Version": "0.1",
		"Bundle-Classpath": ".",
		"Bundle-Activator": "at.ac.tuwien.auto.iotsys.xacml.PDPBundleActivator",
		"Import-Package": "org.osgi.framework, at.ac.tuwien.auto.iotsys.commons, at.ac.tuwien.auto.iotsys.commons.interceptor, " +
		"org.xml.sax, org.xml.sax.helpers, org.xml.sax.ext,  org.apache.xalan, org.apache.xalan.res, " +
		"org.w3c.dom, org.w3c.dom.traversal, org.w3c.dom.ls, javax.xml.parsers,  javax.xml.xpath, javax.xml.transform.sax, javax.xml.transform.dom, " +
		"javax.xml.namespace, javax.xml.transform, javax.xml.transform.stream, javax.xml.validation, javax.xml.datatype, "+
		"org.apache.commons.beanutils, org.apache.commons.beanutils.converters,org.apache.commons.beanutils.expression, org.apache.commons.beanutils.locale,org.apache.commons.beanutils.locale.converters,org.apache.commons.collections, " +
		"org.apache.commons.codec, org.apache.commons.codec.binary, org.apache.commons.codec.digest, org.apache.commons.codec.language, org.apache.commons.codec.language.bm, org.apache.commons.codec.net, " +
		"org.apache.commons.collections.bag, org.apache.commons.collections.bidimap, org.apache.commons.collections.buffer, org.apache.commons.collections.collection, org.apache.commons.collections.comparators, org.apache.commons.collections.functors, org.apache.commons.collections.iterators, org.apache.commons.collections.keyvalue, org.apache.commons.collections.list, org.apache.commons.collections.map, org.apache.commons.collections.set, " +
		"org.apache.commons.configuration, org.apache.commons.configuration.beanutils, org.apache.commons.configuration.event, org.apache.commons.configuration.interpol, org.apache.commons.configuration.plist, org.apache.commons.configuration.reloading, org.apache.commons.configuration.resolver, org.apache.commons.configuration.tree, org.apache.commons.configuration.tree.xpath, org.apache.commons.configuration.web, " +
		"org.apache.commons.digester, org.apache.commons.digester.parser, org.apache.commons.digester.plugins, org.apache.commons.digester.plugins.strategies, org.apache.commons.digester.substitution, org.apache.commons.digester.xmlrules, " +
		"org.apache.commons.jexl2, org.apache.commons.jexl2.internal, org.apache.commons.jexl2.internal.introspection, org.apache.commons.jexl2.introspection, org.apache.commons.jexl2.parser, org.apache.commons.jexl2.scripting, " +
		"org.apache.commons.jxpath, org.apache.commons.jxpath.functions, org.apache.commons.jxpath.ri, org.apache.commons.jxpath.ri.axes, org.apache.commons.jxpath.ri.compiler, org.apache.commons.jxpath.ri.model, org.apache.commons.jxpath.ri.model.beans, org.apache.commons.jxpath.ri.model.container, org.apache.commons.jxpath.ri.model.dom, org.apache.commons.jxpath.ri.model.dynabeans, org.apache.commons.jxpath.ri.model.dynamic, org.apache.commons.jxpath.ri.model.jdom, org.apache.commons.jxpath.ri.parser,org.apache.commons.jxpath.servlet, org.apache.commons.jxpath.util, org.apache.commons.jxpath.xml, " +
		"org.apache.commons.lang, org.apache.commons.lang.builder, org.apache.commons.lang.enums, org.apache.commons.lang.exception, org.apache.commons.lang.math, org.apache.commons.lang.mutable, org.apache.commons.lang.text, org.apache.commons.lang.time, " +
		"org.apache.commons.logging, org.apache.commons.logging.impl, " +
		"com.sun.org.apache.xerces.internal.jaxp.validation, com.sun.org.apache.xerces.internal.jaxp, " +
		"javax.naming.ldap, javax.naming, javax.xml.ws, com.sun.xml.internal.ws.api.message",
		"Export-Package": "at.ac.tuwien.auto.iotsys.xacml.pdp"
		)
	}
}

dependencies {
	provided project(':iotsys-common')

	// compile 'com.sun.org.apache:jaxp-ri:1.4'
	provided group: 'org.apache.felix', name: 'org.osgi.core', version: '1.4.0'
	compile group: 'log4j', name: 'log4j', version: '1.2.17'
	testCompile group: 'junit', name: 'junit', version: '4.11'
}

ext {
	//configDir = file('config')
	resDir = file('res/res')

	String felixDir = "../felix-framework-4.2.1"

	String deployDir = "../dist"

	felix = file(felixDir)
	depl = file(deployDir)
}

deployOsgi.doLast {
	File dstResDir = new File(felix.absolutePath + '/res')

	if(dstResDir.exists()){
		println "Resource directory already available at " + dstResDir.absolutePath

		println "Copying configuration from " + resDir.absolutePath + " to " + dstResDir.absolutePath
		ant.copy(todir:dstResDir){
			fileset(dir:resDir)

		}
	}
}

deploy.doLast {

	File deployResDir = new File(depl.absolutePath + '/res')

	if(deployResDir.exists()){
		println "Resource directory already available at " + deployResDir.absolutePath

		println "Copying configuration from " + resDir.absolutePath + " to " + deployResDir.absolutePath
		ant.copy(todir:deployResDir){
			fileset(dir:resDir)

		}
	}

}
